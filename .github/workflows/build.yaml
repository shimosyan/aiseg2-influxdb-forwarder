name: Build and Test

on:
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}  # デプロイしないため PR レベルの排他制御
  cancel-in-progress: true # PR の更新があった場合は前のジョブをキャンセルする

permissions:
  id-token: write
  contents: read
  pull-requests: write
  issues: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        go-version:
          - 1.25.x

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - uses: aquaproj/aqua-installer@d1fe50798dbadd4eb5b98957290ca175f6b4870f # v4.0.2
        with:
          aqua_version: v2.53.9

      - id: app-token
        uses: actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b # v2.1.1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - run: github-comment exec -- github-comment hide
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: |
          github-comment exec -k common-error -var title:"Mod Download Failed (Go: ${{ matrix.go-version }})" -- go mod download
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Verify dependencies
        run: |
          github-comment exec -k common-error -var title:"Mod Verify Failed (Go: ${{ matrix.go-version }})" -- go mod verify
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Build application
        run: |
          github-comment exec -k common-error -var title:"Build Failed (Go: ${{ matrix.go-version }})" -- go build -v ./cmd/aiseg2-forwarder
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Check Go formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            RESULT=$(gofmt -s -l .)
            github-comment post -k common-error -var title:"The following files are not properly formatted: (Go: ${{ matrix.go-version }})" -var body:"$RESULT"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Run go vet
        run: |
          github-comment exec -k common-error -var title:"Vet Failed (Go: ${{ matrix.go-version }})" -- go vet ./...
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Run tests (if any)
        run: |
          github-comment exec -k common-error -var title:"Test Failed (Go: ${{ matrix.go-version }})" -- go test -v ./...
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
        continue-on-error: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Build Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          push: false
          tags: aiseg2-forwarder:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          github-comment exec -k common-error -var title:"Docker image built (Go: ${{ matrix.go-version }})" -- docker images aiseg2-forwarder:test --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

  success:
    needs: build-and-test
    if: ${{ always() }}
    runs-on: ubuntu-latest

    steps:
      - name: Check job result
        run: |
          RESULT="${{ needs.build-and-test.result }}"
          if [[ $RESULT != "success" && $RESULT != "skipped" ]]; then
            echo "This workflow failed or was cancelled!"
            exit 1
          fi

          echo "Success!!"
          exit 0
